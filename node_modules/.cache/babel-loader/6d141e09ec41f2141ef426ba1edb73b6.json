{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ericafu/CMU/react-website-personal/src/components/pages/Projects.js\";\nimport React from 'react';\nimport '../../App.css';\nimport './Pages.css';\nimport Section from '../ProjectSections.js';\nexport default function Projects() {\n  const csvArray = processCSV();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project-section\",\n    children: csvArray.map((item, i) => {\n      /*#__PURE__*/\n      _jsxDEV(Section, {\n        href: \"/\" + i,\n        title: item.title,\n        category: item.category,\n        dates: item.dates,\n        body: item.summary,\n        link: item.link\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n_c = Projects;\n\nasync function processCSV() {\n  const str = await fetchCSV();\n  const delim = ',';\n  const headers = str.slice(0, str.indexOf('\\n')).split(delim);\n  const rows = str.slice(str.indexOf('\\n') + 1).split('\\n');\n  const newArray = rows.map(row => {\n    const values = row.split(delim);\n    const eachObject = headers.reduce((obj, header, i) => {\n      obj[header] = values[i];\n      return obj;\n    }, {});\n    return eachObject;\n  });\n}\n\nasync function fetchCSV() {\n  const response = await fetch('data/projects.csv');\n  const reader = response.body.getReader();\n  const result = await reader.read();\n  const decoder = new TextDecoder('utf-8');\n  const csv = await decoder.decode(result.value);\n  return csv;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["/Users/ericafu/CMU/react-website-personal/src/components/pages/Projects.js"],"names":["React","Section","Projects","csvArray","processCSV","map","item","i","title","category","dates","summary","link","str","fetchCSV","delim","headers","slice","indexOf","split","rows","newArray","row","values","eachObject","reduce","obj","header","response","fetch","reader","body","getReader","result","read","decoder","TextDecoder","csv","decode","value"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,eAAP;AACA,OAAO,aAAP;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjC,QAAMC,QAAQ,GAAGC,UAAU,EAA3B;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,cAEED,QAAQ,CAACE,GAAT,CAAa,CAACC,IAAD,EAAOC,CAAP,KAAa;AACxB;AAAA,cAAC,OAAD;AAEE,QAAA,IAAI,EAAG,MAAMA,CAFf;AAGE,QAAA,KAAK,EAAGD,IAAI,CAACE,KAHf;AAIE,QAAA,QAAQ,EAAGF,IAAI,CAACG,QAJlB;AAKE,QAAA,KAAK,EAAGH,IAAI,CAACI,KALf;AAME,QAAA,IAAI,EAAGJ,IAAI,CAACK,OANd;AAOE,QAAA,IAAI,EAAGL,IAAI,CAACM;AAPd,SACQL,CADR;AAAA;AAAA;AAAA;AAAA;AASD,KAVD;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;KAnBuBL,Q;;AAqBxB,eAAeE,UAAf,GAA4B;AAC1B,QAAMS,GAAG,GAAG,MAAMC,QAAQ,EAA1B;AACA,QAAMC,KAAK,GAAG,GAAd;AAEA,QAAMC,OAAO,GAAGH,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAYJ,GAAG,CAACK,OAAJ,CAAY,IAAZ,CAAZ,EAA+BC,KAA/B,CAAqCJ,KAArC,CAAhB;AACA,QAAMK,IAAI,GAAGP,GAAG,CAACI,KAAJ,CAAUJ,GAAG,CAACK,OAAJ,CAAY,IAAZ,IAAkB,CAA5B,EAA+BC,KAA/B,CAAqC,IAArC,CAAb;AAEA,QAAME,QAAQ,GAAGD,IAAI,CAACf,GAAL,CAAUiB,GAAG,IAAI;AAChC,UAAMC,MAAM,GAAGD,GAAG,CAACH,KAAJ,CAAUJ,KAAV,CAAf;AACA,UAAMS,UAAU,GAAGR,OAAO,CAACS,MAAR,CAAe,CAACC,GAAD,EAAMC,MAAN,EAAcpB,CAAd,KAAoB;AAClDmB,MAAAA,GAAG,CAACC,MAAD,CAAH,GAAcJ,MAAM,CAAChB,CAAD,CAApB;AACA,aAAOmB,GAAP;AACH,KAHkB,EAGhB,EAHgB,CAAnB;AAIA,WAAOF,UAAP;AACD,GAPgB,CAAjB;AAQD;;AAED,eAAeV,QAAf,GAA0B;AACxB,QAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAD,CAA5B;AACA,QAAMC,MAAM,GAAGF,QAAQ,CAACG,IAAT,CAAcC,SAAd,EAAf;AACA,QAAMC,MAAM,GAAG,MAAMH,MAAM,CAACI,IAAP,EAArB;AACA,QAAMC,OAAO,GAAG,IAAIC,WAAJ,CAAgB,OAAhB,CAAhB;AACA,QAAMC,GAAG,GAAG,MAAMF,OAAO,CAACG,MAAR,CAAeL,MAAM,CAACM,KAAtB,CAAlB;AACA,SAAOF,GAAP;AACD","sourcesContent":["import React from 'react';\nimport '../../App.css';\nimport './Pages.css';\nimport Section from '../ProjectSections.js'\n\nexport default function Projects() {\n  const csvArray = processCSV();\n\n  return( \n    <div className=\"project-section\">\n      {\n      csvArray.map((item, i) => {\n        <Section\n          key={ i }\n          href={ \"/\" + i }\n          title={ item.title }\n          category={ item.category }\n          dates={ item.dates }\n          body={ item.summary }\n          link={ item.link }\n        />\n      })}\n    </div>\n  )\n}\n\nasync function processCSV() {\n  const str = await fetchCSV();\n  const delim = ','\n\n  const headers = str.slice(0,str.indexOf('\\n')).split(delim);\n  const rows = str.slice(str.indexOf('\\n')+1).split('\\n');\n\n  const newArray = rows.map( row => {\n    const values = row.split(delim);\n    const eachObject = headers.reduce((obj, header, i) => {\n        obj[header] = values[i];\n        return obj;\n    }, {})\n    return eachObject;\n  })\n}\n\nasync function fetchCSV() {\n  const response = await fetch('data/projects.csv');\n  const reader = response.body.getReader();\n  const result = await reader.read();\n  const decoder = new TextDecoder('utf-8');\n  const csv = await decoder.decode(result.value);\n  return csv;\n}"]},"metadata":{},"sourceType":"module"}