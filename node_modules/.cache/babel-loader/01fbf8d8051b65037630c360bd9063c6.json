{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ericafu/CMU/erica-w-fu.github.io/src/components/pages/Projects.js\";\nimport React from 'react';\nimport { Link } from 'react-scroll';\nimport './Pages.css';\nimport Section from '../ProjectSection/ProjectSections.js';\nimport Footer from '../Footer/Footer.js';\nimport Papa from 'papaparse';\nimport file from '../data/projects.tsv';\n\nfunction Projects() {\n  const strRead = ``;\n  var projectArr = csvArray(strRead, \"\\t\"); // <div className=\"aligned-sec\">\n  //       <div className=\"left-sec\">\n  //         <div className=\"left-sec-section\"></div>\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gallery-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: projectArr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this) // projectArr.map((item, i) => {\n      //   return <div id={ item.Category }>\n      //     <Section\n      //       key={ i }\n      //       href={ \"/\" + i }\n      //       component={ item.Component }\n      //       title={ item.Title }\n      //       dates={ item.Dates }\n      //       body={ item.Summary }\n      //       link={ item.Link }\n      //     />\n      //   </div>\n      // })\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_c = Projects;\nexport default Projects;\n\nasync function fetchCsv() {\n  const response = await fetch('data/mycsv.csv');\n  const reader = response.body.getReader();\n  const result = await reader.read();\n  const decoder = new TextDecoder('utf-8');\n  const csv = await decoder.decode(result.value);\n  console.log('csv', csv);\n  return csv;\n}\n\nfunction csvArray(str, delim) {\n  const headers = str.slice(0, str.indexOf('\\n')).split(delim);\n  const rows = str.slice(str.indexOf('\\n') + 1).split('\\n');\n  const newArray = rows.map(row => {\n    const values = row.split(delim);\n    const eachObject = headers.reduce((obj, header, i) => {\n      obj[header] = values[i];\n      return obj;\n    }, {});\n    return eachObject;\n  });\n  return newArray;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["/Users/ericafu/CMU/erica-w-fu.github.io/src/components/pages/Projects.js"],"names":["React","Link","Section","Footer","Papa","file","Projects","strRead","projectArr","csvArray","fetchCsv","response","fetch","reader","body","getReader","result","read","decoder","TextDecoder","csv","decode","value","console","log","str","delim","headers","slice","indexOf","split","rows","newArray","map","row","values","eachObject","reduce","obj","header","i"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,OAAO,aAAP;AACA,OAAOC,OAAP,MAAoB,sCAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAGA,OAAOC,IAAP,MAAiB,sBAAjB;;AAEA,SAASC,QAAT,GAAoB;AAElB,QAAMC,OAAO,GAAI,EAAjB;AACA,MAAIC,UAAU,GAAGC,QAAQ,CAACF,OAAD,EAAU,IAAV,CAAzB,CAHkB,CAKlB;AACA;AACA;;AACA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,6BAEI;AAAA,kBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,cAFJ,CAGI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAfJ;AAAA;AAAA;AAAA;AAAA,YADF,eAmBE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAnBF;AAAA,kBADF;AAuBD;;KA/BQF,Q;AAiCT,eAAeA,QAAf;;AAEA,eAAeI,QAAf,GAA0B;AACxB,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAD,CAA5B;AACA,QAAMC,MAAM,GAAGF,QAAQ,CAACG,IAAT,CAAcC,SAAd,EAAf;AACA,QAAMC,MAAM,GAAG,MAAMH,MAAM,CAACI,IAAP,EAArB;AACA,QAAMC,OAAO,GAAG,IAAIC,WAAJ,CAAgB,OAAhB,CAAhB;AACA,QAAMC,GAAG,GAAG,MAAMF,OAAO,CAACG,MAAR,CAAeL,MAAM,CAACM,KAAtB,CAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBJ,GAAnB;AACA,SAAOA,GAAP;AACD;;AAED,SAASX,QAAT,CAAkBgB,GAAlB,EAAuBC,KAAvB,EAA8B;AAC5B,QAAMC,OAAO,GAAGF,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAYH,GAAG,CAACI,OAAJ,CAAY,IAAZ,CAAZ,EAA+BC,KAA/B,CAAqCJ,KAArC,CAAhB;AACA,QAAMK,IAAI,GAAGN,GAAG,CAACG,KAAJ,CAAUH,GAAG,CAACI,OAAJ,CAAY,IAAZ,IAAkB,CAA5B,EAA+BC,KAA/B,CAAqC,IAArC,CAAb;AAEA,QAAME,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAAUC,GAAG,IAAI;AAChC,UAAMC,MAAM,GAAGD,GAAG,CAACJ,KAAJ,CAAUJ,KAAV,CAAf;AACA,UAAMU,UAAU,GAAGT,OAAO,CAACU,MAAR,CAAe,CAACC,GAAD,EAAMC,MAAN,EAAcC,CAAd,KAAoB;AAClDF,MAAAA,GAAG,CAACC,MAAD,CAAH,GAAcJ,MAAM,CAACK,CAAD,CAApB;AACA,aAAOF,GAAP;AACH,KAHkB,EAGhB,EAHgB,CAAnB;AAIA,WAAOF,UAAP;AACD,GAPgB,CAAjB;AASA,SAAOJ,QAAP;AACD","sourcesContent":["import React from 'react';\nimport { Link } from 'react-scroll';\nimport './Pages.css';\nimport Section from '../ProjectSection/ProjectSections.js';\nimport Footer from '../Footer/Footer.js'\nimport Papa from 'papaparse';\n\n\nimport file from '../data/projects.tsv'\n\nfunction Projects() {\n  \n  const strRead = ``\n  var projectArr = csvArray(strRead, \"\\t\");\n\n  // <div className=\"aligned-sec\">\n  //       <div className=\"left-sec\">\n  //         <div className=\"left-sec-section\"></div>\n  return( \n    <>\n      <div className=\"gallery-container\">\n        {\n          <p>{projectArr}</p>\n          // projectArr.map((item, i) => {\n          //   return <div id={ item.Category }>\n          //     <Section\n          //       key={ i }\n          //       href={ \"/\" + i }\n          //       component={ item.Component }\n          //       title={ item.Title }\n          //       dates={ item.Dates }\n          //       body={ item.Summary }\n          //       link={ item.Link }\n          //     />\n          //   </div>\n          // })\n        }\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default Projects;\n\nasync function fetchCsv() {\n  const response = await fetch('data/mycsv.csv');\n  const reader = response.body.getReader();\n  const result = await reader.read();\n  const decoder = new TextDecoder('utf-8');\n  const csv = await decoder.decode(result.value);\n  console.log('csv', csv);\n  return csv;\n}\n\nfunction csvArray(str, delim) {\n  const headers = str.slice(0,str.indexOf('\\n')).split(delim);\n  const rows = str.slice(str.indexOf('\\n')+1).split('\\n');\n\n  const newArray = rows.map( row => {\n    const values = row.split(delim);\n    const eachObject = headers.reduce((obj, header, i) => {\n        obj[header] = values[i];\n        return obj;\n    }, {})\n    return eachObject;\n  })\n\n  return newArray;\n}\n"]},"metadata":{},"sourceType":"module"}